# generated by datamodel-codegen:
#   filename:  openapi_sdk.yaml

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field
from clio_clients.models.subscriptiontype1 import SubscriptionType1


class UserBase(BaseModel):
    account_owner: Optional[bool] = Field(
        None, description="Whether the *User* is the owner of the account"
    )
    clio_connect: Optional[bool] = Field(
        None, description="Whether the *User* is a Clio Connect user"
    )
    court_rules_default_attendee: Optional[bool] = Field(
        None,
        description="Whether the *User* is a default attendee for court rules events",
    )
    created_at: Optional[str] = Field(
        None, description="The time the *User* was created (as a ISO-8601 timestamp)"
    )
    default_calendar_id: Optional[int] = Field(
        None, description="Default calendar id for *User*."
    )
    email: Optional[str] = Field(None, description="The email of the *User*")
    enabled: Optional[bool] = Field(
        None, description="Whether the *User* is allowed to log in"
    )
    etag: Optional[str] = Field(None, description="ETag for the *User*")
    first_name: Optional[str] = Field(None, description="The first name of the *User*")
    id: Optional[int] = Field(None, description="Unique identifier for the *User*")
    initials: Optional[str] = Field(None, description="The initials of the *User*")
    last_name: Optional[str] = Field(None, description="The last name of the *User*")
    name: Optional[str] = Field(None, description="The full name of the *User*")
    phone_number: Optional[str] = Field(
        None, description="The primary phone number for the *User*."
    )
    rate: Optional[float] = Field(
        None, description="Default user activity rate for *User*."
    )
    roles: Optional[List[str]] = Field(
        None, description="An array of roles assigned to this *User*"
    )
    subscription_type: Optional[SubscriptionType1] = Field(
        None, description="The subscription type of the *User*"
    )
    time_zone: Optional[str] = Field(
        None, description="The selected time zone of the *User*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *User* was last updated (as a ISO-8601 timestamp)",
    )
