# generated by datamodel-codegen:
#   filename:  openapi_sdk.yaml

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field

from clio_clients.models.taxsetting import TaxSetting
from clio_clients.models.type.type1 import Type1


class ActivityBase(BaseModel):
    billed: Optional[bool] = Field(
        None,
        description="Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`",
    )
    contingency_fee: Optional[bool] = Field(
        None, description="Whether or not the *Activity* is a contingency fee"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Activity* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date the *Activity* was performed (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Activity*")
    flat_rate: Optional[bool] = Field(
        None, description="Whether the *Activity* is a flat rate"
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Activity*")
    no_charge: Optional[bool] = Field(
        None, description="Whether the non-billable *Activity* is shown on the bill."
    )
    non_billable: Optional[bool] = Field(
        None, description="Whether the *Activity* is non-billable"
    )
    non_billable_total: Optional[float] = Field(
        None, description="The total cost of non-billable items in the *Activity*"
    )
    note: Optional[str] = Field(None, description="The details about the *Activity*")
    on_bill: Optional[bool] = Field(
        None,
        description="Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`",
    )
    price: Optional[float] = Field(
        None, description="The hourly or flat rate of the *Activity*"
    )
    quantity: Optional[float] = Field(
        None,
        description="The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.\n\n**Version <= 4.0.3:**\nThe number of hours the TimeEntry took.\n\n**Latest version:**\nThe number of seconds the TimeEntry took.\n",
    )
    quantity_in_hours: Optional[float] = Field(
        None, description="The number of hours the TimeEntry took."
    )
    quantity_redacted: Optional[bool] = Field(
        None,
        description="Is `true` if any of the following fields are redacted:\n`quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total`\n",
    )
    reference: Optional[str] = Field(
        None, description="A check reference for a HardCostEntry."
    )
    rounded_quantity: Optional[float] = Field(
        None,
        description="The field is applicable to time entries only.\n\n**Version <= 4.0.3:**\nThe number of hours rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n\n**Latest version:**\nThe number of seconds rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n",
    )
    rounded_quantity_in_hours: Optional[float] = Field(
        None,
        description="The number of hours rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n",
    )
    tax_setting: Optional[TaxSetting] = Field(
        None,
        description="The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.",
    )
    total: Optional[float] = Field(
        None,
        description="The total cost of draft, billable and billed items in the *Activity*",
    )
    type: Optional[Type1] = Field(None, description="The type of the *Activity*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Activity* was last updated (as a ISO-8601 timestamp)",
    )
